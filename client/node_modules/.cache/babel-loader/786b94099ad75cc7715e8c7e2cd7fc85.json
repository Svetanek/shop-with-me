{"ast":null,"code":"var _jsxFileName = \"/Users/svetlanashin/Desktop/E-commerce/shop-with-me/src/pages/shop/shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { gettingCollections } from '../../redux/shop/shop.actions';\nimport { selectCollectionFetching, selectCollectionsLoaded } from '../../redux/shop/shop.selectors';\nimport CollectionOverview from '../../components/collections-overview/collections-overview.component';\nimport CollectionPage from '../collection/collection.component';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.unsubscribeFromSnapshot = null;\n  }\n\n  componentDidMount() {\n    const fetchCollections = this.props.fetchCollections;\n    fetchCollections();\n  }\n\n  render() {\n    const _this$props = this.props,\n          match = _this$props.match,\n          isCollectionFetching = _this$props.isCollectionFetching,\n          collectionsLoaded = _this$props.collectionsLoaded;\n    return React.createElement(\"div\", {\n      className: \"shop-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"\".concat(match.path),\n      render: props => React.createElement(CollectionOverviewWithSpinner, Object.assign({\n        isLoading: !collectionsLoaded\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"\".concat(match.path, \"/:collectionId\"),\n      render: props => React.createElement(CollectionPageWithSpinner, Object.assign({\n        isLoading: !collectionsLoaded\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectCollectionFetching,\n  collectionsLoaded: selectCollectionsLoaded\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollections: () => dispatch(gettingCollections())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage); // render() {\n//   const { collections } = this.state;\n//   return (\n//     <div className=\"shop-page\">\n//       {collections.map(collection => (\n//         <Collection key=\"collection.id\" />\n//       ))}\n//     </div>\n//   );\n// }\n// alternative to onSnapshot is promise... but without live update like observable pattern onSnapshot\n//   collectionRef.get()\n//  .then(snapshot => {\n//   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n//   updateCollections(collectionsMap);\n//   this.setState({ loading: false });\n// });\n//\n// fetch('https://firestore.googleapis.com/v1/projects/shop-db-44779/databases/(default)/documents/collections').then(response.json()).then(collections => console.log('Collections', collections))","map":{"version":3,"sources":["/Users/svetlanashin/Desktop/E-commerce/shop-with-me/src/pages/shop/shop.component.jsx"],"names":["React","Route","connect","createStructuredSelector","gettingCollections","selectCollectionFetching","selectCollectionsLoaded","CollectionOverview","CollectionPage","WithSpinner","CollectionOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","Component","unsubscribeFromSnapshot","componentDidMount","fetchCollections","props","render","match","isCollectionFetching","collectionsLoaded","path","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,kBAAT,QAAmC,+BAAnC;AACA,SACEC,wBADF,EAEEC,uBAFF,QAGO,iCAHP;AAIA,OAAOC,kBAAP,MAA+B,sEAA/B;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AAEA,MAAMC,6BAA6B,GAAGD,WAAW,CAACF,kBAAD,CAAjD;AACA,MAAMI,yBAAyB,GAAGF,WAAW,CAACD,cAAD,CAA7C;;AAEA,MAAMI,QAAN,SAAuBZ,KAAK,CAACa,SAA7B,CAAuC;AAAA;AAAA;AAAA,SACrCC,uBADqC,GACX,IADW;AAAA;;AAGrCC,EAAAA,iBAAiB,GAAG;AAAA,UACVC,gBADU,GACW,KAAKC,KADhB,CACVD,gBADU;AAElBA,IAAAA,gBAAgB;AACjB;;AAEDE,EAAAA,MAAM,GAAG;AAAA,wBACoD,KAAKD,KADzD;AAAA,UACCE,KADD,eACCA,KADD;AAAA,UACQC,oBADR,eACQA,oBADR;AAAA,UAC8BC,iBAD9B,eAC8BA,iBAD9B;AAGP,WACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,YAAKF,KAAK,CAACG,IAAX,CAFN;AAGE,MAAA,MAAM,EAAEL,KAAK,IACX,oBAAC,6BAAD;AACE,QAAA,SAAS,EAAE,CAACI;AADd,SAEMJ,KAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAWE,oBAAC,KAAD;AACE,MAAA,IAAI,YAAKE,KAAK,CAACG,IAAX,mBADN;AAEE,MAAA,MAAM,EAAEL,KAAK,IACX,oBAAC,yBAAD;AACE,QAAA,SAAS,EAAE,CAACI;AADd,SAEMJ,KAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,CADF;AAuBD;;AAlCoC;;AAoCvC,MAAMM,eAAe,GAAGpB,wBAAwB,CAAC;AAC/CiB,EAAAA,oBAAoB,EAAEf,wBADyB;AAE/CgB,EAAAA,iBAAiB,EAAEf;AAF4B,CAAD,CAAhD;;AAIA,MAAMkB,kBAAkB,GAAGC,QAAQ,KAAK;AACtCT,EAAAA,gBAAgB,EAAE,MAAMS,QAAQ,CAACrB,kBAAkB,EAAnB;AADM,CAAL,CAAnC;;AAGA,eAAeF,OAAO,CAACqB,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CZ,QAA7C,CAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { gettingCollections } from '../../redux/shop/shop.actions';\nimport {\n  selectCollectionFetching,\n  selectCollectionsLoaded,\n} from '../../redux/shop/shop.selectors';\nimport CollectionOverview from '../../components/collections-overview/collections-overview.component';\nimport CollectionPage from '../collection/collection.component';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\n\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  unsubscribeFromSnapshot = null;\n\n  componentDidMount() {\n    const { fetchCollections } = this.props;\n    fetchCollections();\n  }\n\n  render() {\n    const { match, isCollectionFetching, collectionsLoaded } = this.props;\n\n    return (\n      <div className=\"shop-page\">\n        <Route\n          exact\n          path={`${match.path}`}\n          render={props => (\n            <CollectionOverviewWithSpinner\n              isLoading={!collectionsLoaded}\n              {...props}\n            />\n          )}\n        />\n        <Route\n          path={`${match.path}/:collectionId`}\n          render={props => (\n            <CollectionPageWithSpinner\n              isLoading={!collectionsLoaded}\n              {...props}\n            />\n          )}\n        />\n      </div>\n    );\n  }\n}\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectCollectionFetching,\n  collectionsLoaded: selectCollectionsLoaded,\n});\nconst mapDispatchToProps = dispatch => ({\n  fetchCollections: () => dispatch(gettingCollections()),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);\n\n// render() {\n//   const { collections } = this.state;\n//   return (\n//     <div className=\"shop-page\">\n//       {collections.map(collection => (\n//         <Collection key=\"collection.id\" />\n//       ))}\n//     </div>\n//   );\n// }\n\n// alternative to onSnapshot is promise... but without live update like observable pattern onSnapshot\n//   collectionRef.get()\n//  .then(snapshot => {\n//   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n//   updateCollections(collectionsMap);\n//   this.setState({ loading: false });\n// });\n\n//\n// fetch('https://firestore.googleapis.com/v1/projects/shop-db-44779/databases/(default)/documents/collections').then(response.json()).then(collections => console.log('Collections', collections))\n"]},"metadata":{},"sourceType":"module"}