{"ast":null,"code":"var _jsxFileName = \"/Users/svetlanashin/Desktop/E-commerce/shop-with-me/src/pages/shop/shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { gettingCollections } from '../../redux/shop/shop.actions';\nimport { selectCollectionFetching } from '../../redux/shop/shop.selectors';\nimport CollectionsOverviewContainer from '../../components/collections-overview/collections-overview.container';\nimport CollectionPage from '../collection/collection.component';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.unsubscribeFromSnapshot = null;\n  }\n\n  componentDidMount() {\n    const fetchCollections = this.props.fetchCollections;\n    fetchCollections();\n  }\n\n  render() {\n    const match = this.props.match;\n    return React.createElement(\"div\", {\n      className: \"shop-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"\".concat(match.path),\n      component: CollectionsOverviewContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"\".concat(match.path, \"/:collectionId\"),\n      render: props => React.createElement(CollectionPageWithSpinner, Object.assign({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectCollectionFetching\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollections: () => dispatch(gettingCollections())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage); // alternative to onSnapshot (in componentDidMount) is promise... but without live update like observable pattern onSnapshot\n//   collectionRef.get()\n//  .then(snapshot => {\n//   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n//   updateCollections(collectionsMap);\n//   this.setState({ loading: false });\n// });\n//\n// fetch('https://firestore.googleapis.com/v1/projects/shop-db-44779/databases/(default)/documents/collections').then(response.json()).then(collections => console.log('Collections', collections))\n//WITHSPINNER\n// import WithSpinner from '../../components/with-spinner/with-spinner.component';\n// const CollectionPageWithSpinner = WithSpinner(CollectionPage)\n// <Route\n// path={`${match.path}/:collectionId`}\n// render={props => (\n//   <CollectionPageWithSpinner\n//     isLoading={!collectionsLoaded}\n//     {...props}\n//   />\n// )}\n// />","map":{"version":3,"sources":["/Users/svetlanashin/Desktop/E-commerce/shop-with-me/src/pages/shop/shop.component.jsx"],"names":["React","Route","connect","createStructuredSelector","gettingCollections","selectCollectionFetching","CollectionsOverviewContainer","CollectionPage","WithSpinner","CollectionPageWithSpinner","ShopPage","Component","unsubscribeFromSnapshot","componentDidMount","fetchCollections","props","render","match","path","mapStateToProps","isCollectionFetching","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,kBAAT,QAAmC,+BAAnC;AACA,SAASC,wBAAT,QAAyC,iCAAzC;AACA,OAAOC,4BAAP,MAAyC,sEAAzC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AAEA,MAAMC,yBAAyB,GAAGD,WAAW,CAACD,cAAD,CAA7C;;AAEA,MAAMG,QAAN,SAAuBV,KAAK,CAACW,SAA7B,CAAuC;AAAA;AAAA;AAAA,SACrCC,uBADqC,GACX,IADW;AAAA;;AAGrCC,EAAAA,iBAAiB,GAAG;AAAA,UACVC,gBADU,GACW,KAAKC,KADhB,CACVD,gBADU;AAElBA,IAAAA,gBAAgB;AACjB;;AAEDE,EAAAA,MAAM,GAAG;AAAA,UACCC,KADD,GACW,KAAKF,KADhB,CACCE,KADD;AAGP,WACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,YAAKA,KAAK,CAACC,IAAX,CAFN;AAGE,MAAA,SAAS,EAAEZ,4BAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAME,oBAAC,KAAD;AACE,MAAA,IAAI,YAAKW,KAAK,CAACC,IAAX,mBADN;AAEE,MAAA,MAAM,EAAEH,KAAK,IAAI,oBAAC,yBAAD,oBAA+BA,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CADF;AAaD;;AAxBoC;;AA0BvC,MAAMI,eAAe,GAAGhB,wBAAwB,CAAC;AAC/CiB,EAAAA,oBAAoB,EAAEf;AADyB,CAAD,CAAhD;;AAIA,MAAMgB,kBAAkB,GAAGC,QAAQ,KAAK;AACtCR,EAAAA,gBAAgB,EAAE,MAAMQ,QAAQ,CAAClB,kBAAkB,EAAnB;AADM,CAAL,CAAnC;;AAGA,eAAeF,OAAO,CAACiB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CX,QAA7C,CAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { gettingCollections } from '../../redux/shop/shop.actions';\nimport { selectCollectionFetching } from '../../redux/shop/shop.selectors';\nimport CollectionsOverviewContainer from '../../components/collections-overview/collections-overview.container';\nimport CollectionPage from '../collection/collection.component';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\n\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  unsubscribeFromSnapshot = null;\n\n  componentDidMount() {\n    const { fetchCollections } = this.props;\n    fetchCollections();\n  }\n\n  render() {\n    const { match } = this.props;\n\n    return (\n      <div className=\"shop-page\">\n        <Route\n          exact\n          path={`${match.path}`}\n          component={CollectionsOverviewContainer}\n        />\n        <Route\n          path={`${match.path}/:collectionId`}\n          render={props => <CollectionPageWithSpinner {...props} />}\n        />\n      </div>\n    );\n  }\n}\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectCollectionFetching,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollections: () => dispatch(gettingCollections()),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);\n\n// alternative to onSnapshot (in componentDidMount) is promise... but without live update like observable pattern onSnapshot\n//   collectionRef.get()\n//  .then(snapshot => {\n//   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n//   updateCollections(collectionsMap);\n//   this.setState({ loading: false });\n// });\n\n//\n// fetch('https://firestore.googleapis.com/v1/projects/shop-db-44779/databases/(default)/documents/collections').then(response.json()).then(collections => console.log('Collections', collections))\n\n//WITHSPINNER\n// import WithSpinner from '../../components/with-spinner/with-spinner.component';\n\n// const CollectionPageWithSpinner = WithSpinner(CollectionPage)\n\n// <Route\n// path={`${match.path}/:collectionId`}\n// render={props => (\n//   <CollectionPageWithSpinner\n//     isLoading={!collectionsLoaded}\n//     {...props}\n//   />\n// )}\n// />\n"]},"metadata":{},"sourceType":"module"}